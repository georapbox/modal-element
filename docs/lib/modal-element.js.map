{"mappings":"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","sources":["<anon>","src/modal-element.js"],"sourcesContent":["// @ts-check\nconst $180b6dcf923bafc7$var$PULSE_ANIMATION_DURATION = 300;\nconst $180b6dcf923bafc7$var$template = document.createElement(\"template\");\n$180b6dcf923bafc7$var$template.innerHTML = /* html */ `\n  <style>\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n\n    :host([hidden]),\n    [hidden] {\n      display: none !important;\n    }\n\n    :host {\n      --me-width: 32rem;\n      --me-height: fit-content;\n      --me-border-color: initial;\n      --me-border-style: solid;\n      --me-border-width: initial;\n      --me-border-radius: 0;\n      --me-box-shadow: none;\n      --me-bg-color: canvas;\n      --me-header-spacing: 1rem;\n      --me-body-spacing: 1rem;\n      --me-footer-spacing: 1rem;\n      --me-header-bg-color: transparent;\n      --me-body-bg-color: transparent;\n      --me-footer-bg-color: transparent;\n      --me-close-border-radius: 0;\n      --me-close-bg-color: transparent;\n      display: contents;\n    }\n\n    /* Dialog */\n    .dialog {\n      width: var(--me-width);\n      height: var(--me-height);\n      padding: 0;\n      border-color: var(--me-border-color);\n      border-style: var(--me-border-style);\n      border-width: var(--me-border-width);\n      border-radius: var(--me-border-radius);\n      box-shadow: var(--me-box-shadow);\n      background-color: var(--me-bg-color);\n    }\n\n    .dialog[open] {\n      display: flex;\n    }\n\n    .dialog::backdrop {\n      background-color: rgba(0, 0, 0, 0.5);\n      opacity: 0;\n    }\n\n    .dialog[open]::backdrop {\n      opacity: 1;\n    }\n\n    @media (prefers-reduced-motion: no-preference) {\n      .dialog:not(.dialog--no-animations),\n      .dialog:not(.dialog--no-animations)::backdrop {\n        transition: transform 0.3s, opacity 0.3s, display 0.3s allow-discrete, overlay 0.3s allow-discrete;\n      }\n\n      /* 1. IS-OPEN STATE */\n      .dialog[open] {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      /* 2. EXIT STATE */\n      .dialog {\n        transform: scale(0.95);\n        opacity: 0;\n      }\n\n      /* 0. BEFORE-OPEN STATE */\n      @starting-style {\n        .dialog[open] {\n          transform: scale(0.9);\n          opacity: 0;\n        }\n\n        .dialog[open]::backdrop {\n          opacity: 0;\n        }\n      }\n\n      .dialog--pulse:not(.dialog--no-animations) {\n        animation-name: pulse;\n        animation-duration: ${$180b6dcf923bafc7$var$PULSE_ANIMATION_DURATION}ms;\n        animation-timing-function: cubic-bezier(0.2, 0, 0.38, 0.9);\n      }\n\n      @keyframes pulse {\n        0%   { transform: scale(1); }\n        50%  { transform: scale(1.02); }\n        100% { transform: scale(1); }\n      }\n    }\n\n    /* Dialog panel, header, body, footer */\n    .dialog__panel {\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto;\n    }\n\n    .dialog__header {\n      display: flex;\n      align-items: center;\n      padding: var(--me-header-spacing);\n      column-gap: 0.5rem;\n      background-color: var(--me-header-bg-color);\n    }\n\n    :host([no-close-button]) .dialog__header {\n      column-gap: 0;\n    }\n\n    .dialog__title {\n      display: block;\n      flex: 1 1 auto;\n      padding: 0;\n      margin: 0;\n    }\n\n    .dialog__body {\n      display: block;\n      flex: 1 1 auto;\n      padding: var(--me-body-spacing);\n      overflow: auto;\n      background-color: var(--me-body-bg-color);\n    }\n\n    .dialog__footer {\n      flex: 0 0 auto;\n      text-align: right;\n\n      padding: var(--me-footer-spacing);\n      background-color: var(--me-footer-bg-color);\n    }\n\n    .dialog__close {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      padding: 0.4375rem;\n      border: none;\n      background-color: transparent;\n    }\n\n    .dialog__close:not(:disabled) {\n      cursor: pointer;\n    }\n\n    .dialog__close:disabled {\n      cursor: not-allowed;\n    }\n  </style>\n\n  <dialog part=\"base\" class=\"dialog\">\n    <div part=\"panel\" class=\"dialog__panel\" aria-labelledby=\"title\">\n      <header part=\"header\" class=\"dialog__header\">\n        <slot name=\"header\" class=\"dialog__title\" id=\"title\"></slot>\n\n        <form method=\"dialog\">\n          <button type=\"submit\" part=\"close\" class=\"dialog__close\" aria-label=\"Close\">\n            <slot name=\"close\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/>\n              </svg>\n            </slot>\n          </button>\n        </form>\n      </header>\n\n      <slot name=\"body\" part=\"body\" class=\"dialog__body\"></slot>\n\n      <footer part=\"footer\" class=\"dialog__footer\" hidden>\n        <slot name=\"footer\"></slot>\n      </footer>\n    </div>\n  </dialog>\n`;\n/**\n * @summary A custom element that renders a modal dialog.\n * @extends HTMLElement\n *\n * @property {boolean} open - Determines if the modal is open or not.\n * @property {boolean} staticBackdrop - Determines if the modal should close when the backdrop is clicked.\n * @property {boolean} noHeader - Determines if the modal should have a header or not.\n * @property {boolean} noAnimations - Determines if the modal should have animations or not when opening and closing.\n * @property {boolean} noCloseButton - Determines if the modal should have a default close button or not.\n *\n * @attribute {boolean} open\n * @attribute {boolean} static-backdrop\n * @attribute {boolean} no-header\n * @attribute {boolean} no-animations\n * @attribute {boolean} no-close-button\n *\n * @slot header - The header of the modal.\n * @slot body - The body of the modal.\n * @slot footer - The footer of the modal.\n * @slot close - The close button of the modal.\n *\n * @cssprop --me-width - The width of the modal. Default is 32rem.\n * @cssprop --me-height - The height of the modal. Default is fit-content.\n * @cssprop --me-border-color - The border color of the modal. Default is initial.\n * @cssprop --me-border-style - The border style of the modal. Default is solid.\n * @cssprop --me-border-width - The border width of the modal. Default is initial.\n * @cssprop --me-border-radius - The border radius of the modal. Default is 0.\n * @cssprop --me-box-shadow - The box shadow of the modal. Default is none.\n * @cssprop --me-bg-color - The background color of the modal. Default is canvas.\n * @cssprop --me-header-spacing - The spacing of the header. Default is 1rem.\n * @cssprop --me-body-spacing - The spacing of the body. Default is 1rem.\n * @cssprop --me-footer-spacing - The spacing of the footer. Default is 1rem.\n * @cssprop --me-header-bg-color - The background color of the header. Default is transparent.\n * @cssprop --me-body-bg-color - The background color of the body. Default is transparent.\n * @cssprop --me-footer-bg-color - The background color of the footer. Default is transparent.\n * @cssprop --me-close-border-radius - The border radius of the close button. Default is 0.\n * @cssprop --me-close-bg-color - The background color of the close button. Default is transparent.\n *\n * @csspart base - The base wrapper of the modal.\n * @csspart panel - The panel wrapper of the modal.\n * @csspart header - The header wrapper of the modal.\n * @csspart body - The body wrapper of the modal.\n * @csspart footer - The footer wrapper of the modal.\n * @csspart close - The close button of the modal.\n *\n * @fires me-open - Dispatched when the modal is opened.\n * @fires me-close - Dispatched when the modal is closed.\n * @fires me-request-close - Dispatched when the modal is about to close.\n */ class $180b6dcf923bafc7$export$32589115725b904b extends HTMLElement {\n    /** @type {HTMLDialogElement} */ #dialogEl;\n    /** @type {HTMLSlotElement} */ #footerSlotEl;\n    /** @type {null | ReturnType<typeof setTimeout>} */ #pulseAnimationTimeout;\n    constructor(){\n        super();\n        if (!this.shadowRoot) {\n            this.attachShadow({\n                mode: \"open\"\n            });\n            this.shadowRoot.appendChild($180b6dcf923bafc7$var$template.content.cloneNode(true));\n        }\n        this.#dialogEl = this.shadowRoot.querySelector(\"dialog\");\n        this.#footerSlotEl = this.shadowRoot.querySelector('slot[name=\"footer\"]');\n    }\n    static get observedAttributes() {\n        return [\n            \"open\",\n            \"no-header\",\n            \"no-animations\",\n            \"no-close-button\"\n        ];\n    }\n    /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */ attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"open\" && oldValue !== newValue) {\n            if (this.open) {\n                this.#dialogEl?.showModal();\n                if (document.body) document.body.style.overflowY = \"hidden\";\n                this.dispatchEvent(new CustomEvent(\"me-open\", {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        element: this\n                    }\n                }));\n            } else this.#dialogEl?.close();\n        }\n        if (name === \"no-header\" && oldValue !== newValue) {\n            /** @type {HTMLElement} */ const headerEl = this.#dialogEl?.querySelector(\".dialog__header\");\n            if (headerEl) headerEl.hidden = this.noHeader;\n        }\n        if (name === \"no-animations\" && oldValue !== newValue) this.#dialogEl?.classList.toggle(\"dialog--no-animations\", this.noAnimations);\n        if (name === \"no-close-button\" && oldValue !== newValue) {\n            /** @type {HTMLElement} */ const closeBtnEl = this.#dialogEl?.querySelector(\".dialog__close\");\n            if (closeBtnEl) closeBtnEl.hidden = this.noCloseButton;\n        }\n    }\n    /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */ connectedCallback() {\n        this.#upgradeProperty(\"open\");\n        this.#upgradeProperty(\"staticBackdrop\");\n        this.#upgradeProperty(\"noHeader\");\n        this.#upgradeProperty(\"noAnimations\");\n        this.#upgradeProperty(\"noCloseButton\");\n        this.#dialogEl?.addEventListener(\"click\", this.#handleDialogClick);\n        this.#dialogEl?.addEventListener(\"close\", this.#handleDialogClose);\n        this.#dialogEl?.addEventListener(\"cancel\", this.#handleDialogCancel);\n        this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.addEventListener(\"submit\", this.#handleCloseButtonClick);\n        this.#footerSlotEl?.addEventListener(\"slotchange\", this.#handleFooterSlotChange);\n    }\n    /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */ disconnectedCallback() {\n        this.#pulseAnimationTimeout && clearTimeout(this.#pulseAnimationTimeout);\n        this.#dialogEl?.addEventListener(\"click\", this.#handleDialogClick);\n        this.#dialogEl?.removeEventListener(\"close\", this.#handleDialogClose);\n        this.#dialogEl?.removeEventListener(\"cancel\", this.#handleDialogCancel);\n        this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.removeEventListener(\"submit\", this.#handleCloseButtonClick);\n        this.#footerSlotEl?.removeEventListener(\"slotchange\", this.#handleFooterSlotChange);\n    }\n    /**\n   * Deternimes if the modal is open or not.\n   *\n   * @type {boolean} - True if the modal is open, otherwise false. Default is false.\n   * @default false\n   * @attribute open - Reflects the open property.\n   */ get open() {\n        return this.hasAttribute(\"open\");\n    }\n    set open(value) {\n        if (value) this.setAttribute(\"open\", \"\");\n        else this.removeAttribute(\"open\");\n    }\n    /**\n   * Determines if the modal should close when the backdrop is clicked.\n   *\n   * @type {boolean} - True if the modal should close when the backdrop is clicked, otherwise false. Default is false.\n   * @default false\n   * @attribute static-backdrop - Reflects the staticBackdrop property.\n   */ get staticBackdrop() {\n        return this.hasAttribute(\"static-backdrop\");\n    }\n    set staticBackdrop(value) {\n        if (value) this.setAttribute(\"static-backdrop\", \"\");\n        else this.removeAttribute(\"static-backdrop\");\n    }\n    /**\n   * Determines if the modal should have a header or not.\n   *\n   * @type {boolean} - True if the modal should have a header, otherwise false. Default is false.\n   * @default false\n   * @attribute no-header - Reflects the noHeader property.\n   */ get noHeader() {\n        return this.hasAttribute(\"no-header\");\n    }\n    set noHeader(value) {\n        if (value) this.setAttribute(\"no-header\", \"\");\n        else this.removeAttribute(\"no-header\");\n    }\n    /**\n   * Determines if the modal should have animations or not when opening and closing.\n   *\n   * @type {boolean} - True if the modal should have animations, otherwise false. Default is false.\n   * @default false\n   * @attribute no-animations - Reflects the noAnimations property.\n   */ get noAnimations() {\n        return this.hasAttribute(\"no-animations\");\n    }\n    set noAnimations(value) {\n        if (value) this.setAttribute(\"no-animations\", \"\");\n        else this.removeAttribute(\"no-animations\");\n    }\n    /**\n   * Determines if the modal should have a default close button or not.\n   *\n   * @type {boolean} - True if the modal should have a close button, otherwise false. Default is false.\n   * @default false\n   * @attribute no-close-button - Reflects the noCloseButton property.\n   */ get noCloseButton() {\n        return this.hasAttribute(\"no-close-button\");\n    }\n    set noCloseButton(value) {\n        if (value) this.setAttribute(\"no-close-button\", \"\");\n        else this.removeAttribute(\"no-close-button\");\n    }\n    /**\n   * Applies a pulse effect on the dialog.\n   */ #applyPulseEffectOnDialog() {\n        if (this.#pulseAnimationTimeout) return;\n        this.#dialogEl?.classList.add(\"dialog--pulse\");\n        this.#pulseAnimationTimeout = setTimeout(()=>{\n            this.#dialogEl?.classList.remove(\"dialog--pulse\");\n            clearTimeout(this.#pulseAnimationTimeout);\n            this.#pulseAnimationTimeout = null;\n        }, $180b6dcf923bafc7$var$PULSE_ANIMATION_DURATION);\n    }\n    /**\n   * Handles the close event of the dialog.\n   */ #handleDialogClose = ()=>{\n        // This is needed because the dialog element does not reset\n        // the open property when the dialog is closed by the user.\n        this.open = false;\n        if (document.body) document.body.style.overflowY = null;\n        this.dispatchEvent(new CustomEvent(\"me-close\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                element: this\n            }\n        }));\n    };\n    /**\n   * Handles the cancel event of the dialog.\n   * This event is fired when the user presses the escape key.\n   */ #handleDialogCancel = (evt)=>{\n        const requestCloseEvent = this.#createRequestCloseEvent(\"escape-key\");\n        this.dispatchEvent(requestCloseEvent);\n        if (requestCloseEvent.defaultPrevented) {\n            evt.preventDefault();\n            !this.noAnimations && this.#applyPulseEffectOnDialog();\n        }\n    };\n    /**\n   * Handles the click event of the close button.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */ #handleCloseButtonClick = (evt)=>{\n        const requestCloseEvent = this.#createRequestCloseEvent(\"close-button\");\n        this.dispatchEvent(requestCloseEvent);\n        if (requestCloseEvent.defaultPrevented) {\n            evt.preventDefault();\n            !this.noAnimations && this.#applyPulseEffectOnDialog();\n        }\n    };\n    /**\n   * Handles the click event of the dialog.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */ #handleDialogClick = (evt)=>{\n        if (evt.target !== evt.currentTarget) return;\n        const requestCloseEvent = this.#createRequestCloseEvent(\"backdrop-click\");\n        this.dispatchEvent(requestCloseEvent);\n        if (requestCloseEvent.defaultPrevented || this.staticBackdrop) {\n            !this.noAnimations && this.#applyPulseEffectOnDialog();\n            return;\n        }\n        this.#dialogEl?.close();\n    };\n    /**\n   * Handles the slotchange event of the footer slot.\n   */ #handleFooterSlotChange = ()=>{\n        /** @type {HTMLElement} */ const footerEl = this.#dialogEl?.querySelector(\".dialog__footer\");\n        const hasFooterSlotNodes = this.#footerSlotEl?.assignedNodes()?.length > 0;\n        if (!footerEl) return;\n        footerEl.hidden = !hasFooterSlotNodes;\n    };\n    /**\n   * Creates a request close event.\n   *\n   * @param {'close-button' | 'escape-key' | 'backdrop-click'} reason - The reason that the modal is about to close.\n   */ #createRequestCloseEvent(reason) {\n        return new CustomEvent(\"me-request-close\", {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            detail: {\n                reason: reason,\n                element: this\n            }\n        });\n    }\n    /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {string} prop - The property to upgrade.\n   */ #upgradeProperty(prop) {\n        if (Object.prototype.hasOwnProperty.call(this, prop)) {\n            const value = this[prop];\n            delete this[prop];\n            this[prop] = value;\n        }\n    }\n    /**\n   * Opens the modal if it is closed, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.show();\n   */ show() {\n        if (this.open) return;\n        this.open = true;\n    }\n    /**\n   * Closes the modal if it is open, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.hide();\n   */ hide() {\n        if (!this.open) return;\n        this.open = false;\n    }\n    /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='modal-element']\n   * @example\n   * ModalElement.defineCustomElement('my-modal');\n   */ static defineCustomElement(elementName = \"modal-element\") {\n        if (typeof window !== \"undefined\" && !window.customElements.get(elementName)) window.customElements.define(elementName, $180b6dcf923bafc7$export$32589115725b904b);\n    }\n}\n\n\nexport {$180b6dcf923bafc7$export$32589115725b904b as ModalElement};\n//# sourceMappingURL=modal-element.js.map\n","// @ts-check\n\nconst PULSE_ANIMATION_DURATION = 300;\nconst template = document.createElement('template');\n\ntemplate.innerHTML = /* html */`\n  <style>\n    *,\n    *::before,\n    *::after {\n      box-sizing: border-box;\n    }\n\n    :host([hidden]),\n    [hidden] {\n      display: none !important;\n    }\n\n    :host {\n      --me-width: 32rem;\n      --me-height: fit-content;\n      --me-border-color: initial;\n      --me-border-style: solid;\n      --me-border-width: initial;\n      --me-border-radius: 0;\n      --me-box-shadow: none;\n      --me-bg-color: canvas;\n      --me-header-spacing: 1rem;\n      --me-body-spacing: 1rem;\n      --me-footer-spacing: 1rem;\n      --me-header-bg-color: transparent;\n      --me-body-bg-color: transparent;\n      --me-footer-bg-color: transparent;\n      --me-close-border-radius: 0;\n      --me-close-bg-color: transparent;\n      display: contents;\n    }\n\n    /* Dialog */\n    .dialog {\n      width: var(--me-width);\n      height: var(--me-height);\n      padding: 0;\n      border-color: var(--me-border-color);\n      border-style: var(--me-border-style);\n      border-width: var(--me-border-width);\n      border-radius: var(--me-border-radius);\n      box-shadow: var(--me-box-shadow);\n      background-color: var(--me-bg-color);\n    }\n\n    .dialog[open] {\n      display: flex;\n    }\n\n    .dialog::backdrop {\n      background-color: rgba(0, 0, 0, 0.5);\n      opacity: 0;\n    }\n\n    .dialog[open]::backdrop {\n      opacity: 1;\n    }\n\n    @media (prefers-reduced-motion: no-preference) {\n      .dialog:not(.dialog--no-animations),\n      .dialog:not(.dialog--no-animations)::backdrop {\n        transition: transform 0.3s, opacity 0.3s, display 0.3s allow-discrete, overlay 0.3s allow-discrete;\n      }\n\n      /* 1. IS-OPEN STATE */\n      .dialog[open] {\n        transform: scale(1);\n        opacity: 1;\n      }\n\n      /* 2. EXIT STATE */\n      .dialog {\n        transform: scale(0.95);\n        opacity: 0;\n      }\n\n      /* 0. BEFORE-OPEN STATE */\n      @starting-style {\n        .dialog[open] {\n          transform: scale(0.9);\n          opacity: 0;\n        }\n\n        .dialog[open]::backdrop {\n          opacity: 0;\n        }\n      }\n\n      .dialog--pulse:not(.dialog--no-animations) {\n        animation-name: pulse;\n        animation-duration: ${PULSE_ANIMATION_DURATION}ms;\n        animation-timing-function: cubic-bezier(0.2, 0, 0.38, 0.9);\n      }\n\n      @keyframes pulse {\n        0%   { transform: scale(1); }\n        50%  { transform: scale(1.02); }\n        100% { transform: scale(1); }\n      }\n    }\n\n    /* Dialog panel, header, body, footer */\n    .dialog__panel {\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto;\n    }\n\n    .dialog__header {\n      display: flex;\n      align-items: center;\n      padding: var(--me-header-spacing);\n      column-gap: 0.5rem;\n      background-color: var(--me-header-bg-color);\n    }\n\n    :host([no-close-button]) .dialog__header {\n      column-gap: 0;\n    }\n\n    .dialog__title {\n      display: block;\n      flex: 1 1 auto;\n      padding: 0;\n      margin: 0;\n    }\n\n    .dialog__body {\n      display: block;\n      flex: 1 1 auto;\n      padding: var(--me-body-spacing);\n      overflow: auto;\n      background-color: var(--me-body-bg-color);\n    }\n\n    .dialog__footer {\n      flex: 0 0 auto;\n      text-align: right;\n\n      padding: var(--me-footer-spacing);\n      background-color: var(--me-footer-bg-color);\n    }\n\n    .dialog__close {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      padding: 0.4375rem;\n      border: none;\n      background-color: transparent;\n    }\n\n    .dialog__close:not(:disabled) {\n      cursor: pointer;\n    }\n\n    .dialog__close:disabled {\n      cursor: not-allowed;\n    }\n  </style>\n\n  <dialog part=\"base\" class=\"dialog\">\n    <div part=\"panel\" class=\"dialog__panel\" aria-labelledby=\"title\">\n      <header part=\"header\" class=\"dialog__header\">\n        <slot name=\"header\" class=\"dialog__title\" id=\"title\"></slot>\n\n        <form method=\"dialog\">\n          <button type=\"submit\" part=\"close\" class=\"dialog__close\" aria-label=\"Close\">\n            <slot name=\"close\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/>\n              </svg>\n            </slot>\n          </button>\n        </form>\n      </header>\n\n      <slot name=\"body\" part=\"body\" class=\"dialog__body\"></slot>\n\n      <footer part=\"footer\" class=\"dialog__footer\" hidden>\n        <slot name=\"footer\"></slot>\n      </footer>\n    </div>\n  </dialog>\n`;\n\n/**\n * @summary A custom element that renders a modal dialog.\n * @extends HTMLElement\n *\n * @property {boolean} open - Determines if the modal is open or not.\n * @property {boolean} staticBackdrop - Determines if the modal should close when the backdrop is clicked.\n * @property {boolean} noHeader - Determines if the modal should have a header or not.\n * @property {boolean} noAnimations - Determines if the modal should have animations or not when opening and closing.\n * @property {boolean} noCloseButton - Determines if the modal should have a default close button or not.\n *\n * @attribute {boolean} open\n * @attribute {boolean} static-backdrop\n * @attribute {boolean} no-header\n * @attribute {boolean} no-animations\n * @attribute {boolean} no-close-button\n *\n * @slot header - The header of the modal.\n * @slot body - The body of the modal.\n * @slot footer - The footer of the modal.\n * @slot close - The close button of the modal.\n *\n * @cssprop --me-width - The width of the modal. Default is 32rem.\n * @cssprop --me-height - The height of the modal. Default is fit-content.\n * @cssprop --me-border-color - The border color of the modal. Default is initial.\n * @cssprop --me-border-style - The border style of the modal. Default is solid.\n * @cssprop --me-border-width - The border width of the modal. Default is initial.\n * @cssprop --me-border-radius - The border radius of the modal. Default is 0.\n * @cssprop --me-box-shadow - The box shadow of the modal. Default is none.\n * @cssprop --me-bg-color - The background color of the modal. Default is canvas.\n * @cssprop --me-header-spacing - The spacing of the header. Default is 1rem.\n * @cssprop --me-body-spacing - The spacing of the body. Default is 1rem.\n * @cssprop --me-footer-spacing - The spacing of the footer. Default is 1rem.\n * @cssprop --me-header-bg-color - The background color of the header. Default is transparent.\n * @cssprop --me-body-bg-color - The background color of the body. Default is transparent.\n * @cssprop --me-footer-bg-color - The background color of the footer. Default is transparent.\n * @cssprop --me-close-border-radius - The border radius of the close button. Default is 0.\n * @cssprop --me-close-bg-color - The background color of the close button. Default is transparent.\n *\n * @csspart base - The base wrapper of the modal.\n * @csspart panel - The panel wrapper of the modal.\n * @csspart header - The header wrapper of the modal.\n * @csspart body - The body wrapper of the modal.\n * @csspart footer - The footer wrapper of the modal.\n * @csspart close - The close button of the modal.\n *\n * @fires me-open - Dispatched when the modal is opened.\n * @fires me-close - Dispatched when the modal is closed.\n * @fires me-request-close - Dispatched when the modal is about to close.\n */\nclass ModalElement extends HTMLElement {\n  /** @type {HTMLDialogElement} */\n  #dialogEl;\n\n  /** @type {HTMLSlotElement} */\n  #footerSlotEl;\n\n  /** @type {null | ReturnType<typeof setTimeout>} */\n  #pulseAnimationTimeout;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      this.attachShadow({ mode: 'open' });\n      this.shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    this.#dialogEl = this.shadowRoot.querySelector('dialog');\n    this.#footerSlotEl = this.shadowRoot.querySelector('slot[name=\"footer\"]');\n  }\n\n  static get observedAttributes() {\n    return ['open', 'no-header', 'no-animations', 'no-close-button'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'open' && oldValue !== newValue) {\n      if (this.open) {\n        this.#dialogEl?.showModal();\n\n        if (document.body) {\n          document.body.style.overflowY = 'hidden';\n        }\n\n        this.dispatchEvent(new CustomEvent('me-open', {\n          bubbles: true,\n          composed: true,\n          detail: { element: this }\n        }));\n      } else {\n        this.#dialogEl?.close();\n      }\n    }\n\n    if (name === 'no-header' && oldValue !== newValue) {\n      /** @type {HTMLElement} */\n      const headerEl = this.#dialogEl?.querySelector('.dialog__header');\n\n      if (headerEl) {\n        headerEl.hidden = this.noHeader;\n      }\n    }\n\n    if (name === 'no-animations' && oldValue !== newValue) {\n      this.#dialogEl?.classList.toggle('dialog--no-animations', this.noAnimations);\n    }\n\n    if (name === 'no-close-button' && oldValue !== newValue) {\n      /** @type {HTMLElement} */\n      const closeBtnEl = this.#dialogEl?.querySelector('.dialog__close');\n\n      if (closeBtnEl) {\n        closeBtnEl.hidden = this.noCloseButton;\n      }\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('open');\n    this.#upgradeProperty('staticBackdrop');\n    this.#upgradeProperty('noHeader');\n    this.#upgradeProperty('noAnimations');\n    this.#upgradeProperty('noCloseButton');\n\n    this.#dialogEl?.addEventListener('click', this.#handleDialogClick);\n    this.#dialogEl?.addEventListener('close', this.#handleDialogClose);\n    this.#dialogEl?.addEventListener('cancel', this.#handleDialogCancel);\n    this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.addEventListener('submit', this.#handleCloseButtonClick);\n    this.#footerSlotEl?.addEventListener('slotchange', this.#handleFooterSlotChange);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.#pulseAnimationTimeout && clearTimeout(this.#pulseAnimationTimeout);\n    this.#dialogEl?.addEventListener('click', this.#handleDialogClick);\n    this.#dialogEl?.removeEventListener('close', this.#handleDialogClose);\n    this.#dialogEl?.removeEventListener('cancel', this.#handleDialogCancel);\n    this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.removeEventListener('submit', this.#handleCloseButtonClick);\n    this.#footerSlotEl?.removeEventListener('slotchange', this.#handleFooterSlotChange);\n  }\n\n  /**\n   * Deternimes if the modal is open or not.\n   *\n   * @type {boolean} - True if the modal is open, otherwise false. Default is false.\n   * @default false\n   * @attribute open - Reflects the open property.\n   */\n  get open() {\n    return this.hasAttribute('open');\n  }\n\n  set open(value) {\n    if (value) {\n      this.setAttribute('open', '');\n    } else {\n      this.removeAttribute('open');\n    }\n  }\n\n  /**\n   * Determines if the modal should close when the backdrop is clicked.\n   *\n   * @type {boolean} - True if the modal should close when the backdrop is clicked, otherwise false. Default is false.\n   * @default false\n   * @attribute static-backdrop - Reflects the staticBackdrop property.\n   */\n  get staticBackdrop() {\n    return this.hasAttribute('static-backdrop');\n  }\n\n  set staticBackdrop(value) {\n    if (value) {\n      this.setAttribute('static-backdrop', '');\n    } else {\n      this.removeAttribute('static-backdrop');\n    }\n  }\n\n  /**\n   * Determines if the modal should have a header or not.\n   *\n   * @type {boolean} - True if the modal should have a header, otherwise false. Default is false.\n   * @default false\n   * @attribute no-header - Reflects the noHeader property.\n   */\n  get noHeader() {\n    return this.hasAttribute('no-header');\n  }\n\n  set noHeader(value) {\n    if (value) {\n      this.setAttribute('no-header', '');\n    } else {\n      this.removeAttribute('no-header');\n    }\n  }\n\n  /**\n   * Determines if the modal should have animations or not when opening and closing.\n   *\n   * @type {boolean} - True if the modal should have animations, otherwise false. Default is false.\n   * @default false\n   * @attribute no-animations - Reflects the noAnimations property.\n   */\n  get noAnimations() {\n    return this.hasAttribute('no-animations');\n  }\n\n  set noAnimations(value) {\n    if (value) {\n      this.setAttribute('no-animations', '');\n    } else {\n      this.removeAttribute('no-animations');\n    }\n  }\n\n  /**\n   * Determines if the modal should have a default close button or not.\n   *\n   * @type {boolean} - True if the modal should have a close button, otherwise false. Default is false.\n   * @default false\n   * @attribute no-close-button - Reflects the noCloseButton property.\n   */\n  get noCloseButton() {\n    return this.hasAttribute('no-close-button');\n  }\n\n  set noCloseButton(value) {\n    if (value) {\n      this.setAttribute('no-close-button', '');\n    } else {\n      this.removeAttribute('no-close-button');\n    }\n  }\n\n  /**\n   * Applies a pulse effect on the dialog.\n   */\n  #applyPulseEffectOnDialog() {\n    if (this.#pulseAnimationTimeout) {\n      return;\n    }\n\n    this.#dialogEl?.classList.add('dialog--pulse');\n\n    this.#pulseAnimationTimeout = setTimeout(() => {\n      this.#dialogEl?.classList.remove('dialog--pulse');\n      clearTimeout(this.#pulseAnimationTimeout);\n      this.#pulseAnimationTimeout = null;\n    }, PULSE_ANIMATION_DURATION);\n  }\n\n  /**\n   * Handles the close event of the dialog.\n   */\n  #handleDialogClose = () => {\n    // This is needed because the dialog element does not reset\n    // the open property when the dialog is closed by the user.\n    this.open = false;\n\n    if (document.body) {\n      document.body.style.overflowY = null;\n    }\n\n    this.dispatchEvent(new CustomEvent('me-close', {\n      bubbles: true,\n      composed: true,\n      detail: { element: this }\n    }));\n  };\n\n  /**\n   * Handles the cancel event of the dialog.\n   * This event is fired when the user presses the escape key.\n   */\n  #handleDialogCancel = evt => {\n    const requestCloseEvent = this.#createRequestCloseEvent('escape-key');\n\n    this.dispatchEvent(requestCloseEvent);\n\n    if (requestCloseEvent.defaultPrevented) {\n      evt.preventDefault();\n      !this.noAnimations && this.#applyPulseEffectOnDialog();\n    }\n  };\n\n  /**\n   * Handles the click event of the close button.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */\n  #handleCloseButtonClick = evt => {\n    const requestCloseEvent = this.#createRequestCloseEvent('close-button');\n\n    this.dispatchEvent(requestCloseEvent);\n\n    if (requestCloseEvent.defaultPrevented) {\n      evt.preventDefault();\n      !this.noAnimations && this.#applyPulseEffectOnDialog();\n    }\n  };\n\n  /**\n   * Handles the click event of the dialog.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */\n  #handleDialogClick = evt => {\n    if (evt.target !== evt.currentTarget) {\n      return;\n    }\n\n    const requestCloseEvent = this.#createRequestCloseEvent('backdrop-click');\n\n    this.dispatchEvent(requestCloseEvent);\n\n    if (requestCloseEvent.defaultPrevented || this.staticBackdrop) {\n      !this.noAnimations && this.#applyPulseEffectOnDialog();\n      return;\n    }\n\n    this.#dialogEl?.close();\n  };\n\n  /**\n   * Handles the slotchange event of the footer slot.\n   */\n  #handleFooterSlotChange = () => {\n    /** @type {HTMLElement} */\n    const footerEl = this.#dialogEl?.querySelector('.dialog__footer');\n    const hasFooterSlotNodes = this.#footerSlotEl?.assignedNodes()?.length > 0;\n\n    if (!footerEl) {\n      return;\n    }\n\n    footerEl.hidden = !hasFooterSlotNodes;\n  };\n\n  /**\n   * Creates a request close event.\n   *\n   * @param {'close-button' | 'escape-key' | 'backdrop-click'} reason - The reason that the modal is about to close.\n   */\n  #createRequestCloseEvent(reason) {\n    return new CustomEvent('me-request-close', {\n      bubbles: true,\n      composed: true,\n      cancelable: true,\n      detail: {\n        reason,\n        element: this\n      }\n    });\n  }\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {string} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n\n  /**\n   * Opens the modal if it is closed, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.show();\n   */\n  show() {\n    if (this.open) {\n      return;\n    }\n\n    this.open = true;\n  }\n\n  /**\n   * Closes the modal if it is open, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.hide();\n   */\n  hide() {\n    if (!this.open) {\n      return;\n    }\n\n    this.open = false;\n  }\n\n  /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='modal-element']\n   * @example\n   * ModalElement.defineCustomElement('my-modal');\n   */\n  static defineCustomElement(elementName = 'modal-element') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ModalElement);\n    }\n  }\n}\n\nexport { ModalElement };\n"],"names":["$180b6dcf923bafc7$var$template","document","createElement","innerHTML","$180b6dcf923bafc7$export$32589115725b904b","HTMLElement","dialogEl","footerSlotEl","pulseAnimationTimeout","constructor","shadowRoot","attachShadow","mode","appendChild","content","cloneNode","querySelector","observedAttributes","attributeChangedCallback","name","oldValue","newValue","open","showModal","body","style","overflowY","dispatchEvent","CustomEvent","bubbles","composed","detail","element","close","headerEl","hidden","noHeader","classList","toggle","noAnimations","closeBtnEl","noCloseButton","connectedCallback","upgradeProperty","addEventListener","handleDialogClick","handleDialogClose","handleDialogCancel","handleCloseButtonClick","handleFooterSlotChange","disconnectedCallback","clearTimeout","removeEventListener","hasAttribute","value","setAttribute","removeAttribute","staticBackdrop","applyPulseEffectOnDialog","add","setTimeout","remove","evt","requestCloseEvent","createRequestCloseEvent","defaultPrevented","preventDefault","target","currentTarget","footerEl","hasFooterSlotNodes","assignedNodes","length","reason","cancelable","prop","Object","prototype","hasOwnProperty","call","show","hide","defineCustomElement","elementName","window","customElements","get","define","ModalElement"],"version":3,"file":"modal-element.js.map"}